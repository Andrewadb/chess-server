<%= render '/chessboard' %>


<span id="fen">
</span>
</p>
<p>
  <strong>Position:</strong>
  <%= @game.position %>
</p>

<p>
  <strong>Text:</strong>
  <%= @game.text %>
</p>

<p>
  <strong>Result:</strong>
  <%= @game.result %>
</p>

<p>
  <strong>White:</strong>
  <%= @game.white %>
</p>

<p>
  <strong>Black:</strong>
  <%= @game.black %>
</p>

  <strong>White_user_id:</strong>
  <%= @game.user_white_id %>
</p>
<p>
  <strong>Black_user_id:</strong>
  <%= @game.user_black_id %>
</p>
<p>
  <strong>User color</strong>
  <% if @game.user_white_id == current_user.id %>
    white
  <% else %>
    black
  <% end %>
</p>
<%= link_to 'Edit', edit_game_path(@game) %> |
<%= link_to 'Back', games_path %>
<%= render 'form' %>

<script>
// ******************************************
var board,
  game = new Chess("<%= @game.position %>"),
  statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');
  usersTurn = true;
  userColor = (<% if @game.user_white_id == current_user.id %>'w'<% else %>'b'<% end %>);
  userColorFull = (<% if @game.user_white_id == current_user.id %>'white'<% else %>'black'<% end %>);

  var fenField = document.getElementById("game_position");


// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      (game.turn() !== userColor) ){
    return false;
  }
};

var onDrop = function(source, target) {
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });

  // illegal move
  if (move === null){
   return 'snapback';
 } 

  updateStatus();
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd = function() {
  board.position(game.fen());


  // *********
  // var cfg;
  // cfg[draggable] = false;

};

var onChange = function() {
fenField.value = game.fen();
}



var updateStatus = function() {
  var status = '';

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl.html(status);
  fenEl.html(game.fen());
  pgnEl.html(game.pgn());
};

var cfg = {
  draggable: true,

  position: "<%= @game.position %>",
  onDragStart: onDragStart,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd,
  onChange: onChange

  
};
board = ChessBoard('board', cfg);
board.orientation(userColorFull);

updateStatus();

</script>
